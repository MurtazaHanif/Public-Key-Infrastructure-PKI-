# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tk7ShBYOL6YtaIB3W8L-kfqQHuBf3Ew1
"""

# Install cryptography if not already installed
!pip install cryptography

# Import libraries
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes
from cryptography import x509
from cryptography.x509.oid import NameOID
import datetime

# ---------------------------
# Step 1: Create a CA (Certificate Authority)
# ---------------------------
ca_private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
ca_subject = x509.Name([
    x509.NameAttribute(NameOID.COUNTRY_NAME, "US"),
    x509.NameAttribute(NameOID.ORGANIZATION_NAME, "My Test CA"),
    x509.NameAttribute(NameOID.COMMON_NAME, "My Test CA Root"),
])

ca_certificate = (
    x509.CertificateBuilder()
    .subject_name(ca_subject)
    .issuer_name(ca_subject)  # self-signed
    .public_key(ca_private_key.public_key())
    .serial_number(x509.random_serial_number())
    .not_valid_before(datetime.datetime.utcnow())
    .not_valid_after(datetime.datetime.utcnow() + datetime.timedelta(days=365))
    .add_extension(x509.BasicConstraints(ca=True, path_length=None), critical=True)
    .sign(private_key=ca_private_key, algorithm=hashes.SHA256())
)

# Save CA certificate
with open("ca_certificate.pem", "wb") as f:
    f.write(ca_certificate.public_bytes(serialization.Encoding.PEM))

# ---------------------------
# Step 2: Create a user key pair and certificate signed by the CA
# ---------------------------
user_private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)
user_subject = x509.Name([
    x509.NameAttribute(NameOID.COUNTRY_NAME, "US"),
    x509.NameAttribute(NameOID.ORGANIZATION_NAME, "User Org"),
    x509.NameAttribute(NameOID.COMMON_NAME, "user@example.com"),
])

user_certificate = (
    x509.CertificateBuilder()
    .subject_name(user_subject)
    .issuer_name(ca_subject)  # signed by CA
    .public_key(user_private_key.public_key())
    .serial_number(x509.random_serial_number())
    .not_valid_before(datetime.datetime.utcnow())
    .not_valid_after(datetime.datetime.utcnow() + datetime.timedelta(days=365))
    .sign(private_key=ca_private_key, algorithm=hashes.SHA256())
)

# Save user certificate and key
with open("user_certificate.pem", "wb") as f:
    f.write(user_certificate.public_bytes(serialization.Encoding.PEM))

with open("user_private_key.pem", "wb") as f:
    f.write(user_private_key.private_bytes(
        encoding=serialization.Encoding.PEM,
        format=serialization.PrivateFormat.PKCS8,
        encryption_algorithm=serialization.NoEncryption()
    ))

# ---------------------------
# Step 3: Sign a message with the user's private key
# ---------------------------
message = b"This is a secure message."
signature = user_private_key.sign(
    message,
    padding.PSS(
        mgf=padding.MGF1(hashes.SHA256()),
        salt_length=padding.PSS.MAX_LENGTH
    ),
    hashes.SHA256()
)

print("Message signed successfully!")

# ---------------------------
# Step 4: Verify the signature using the user's certificate
# ---------------------------
user_public_key = user_certificate.public_key()

try:
    user_public_key.verify(
        signature,
        message,
        padding.PSS(
            mgf=padding.MGF1(hashes.SHA256()),
            salt_length=padding.PSS.MAX_LENGTH
        ),
        hashes.SHA256()
    )
    print("Signature verification successful ✅")
except Exception as e:
    print("Signature verification failed ❌:", e)



